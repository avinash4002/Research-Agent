import os
import re
import json
from google import genai
from dotenv import load_dotenv

load_dotenv()

# Configure Gemini API key
GEMINI_API_KEY=os.getenv("GEMINI_API_KEY")
client = genai.Client(api_key=GEMINI_API_KEY)

def generate_ai_usecases(company_name, company_summary):
    """Generates the top 5 relevant AI/ML use cases for the given company in bullet points."""
    prompt = (
        f"Based on the following company summary, suggest the **top 5 most impactful** AI and Machine Learning use cases "
        f"that {company_name} can implement. Provide practical applications aligned with the company's industry and services. "
        f"Format the response as a **clear, structured bullet-point list**, with each use case briefly explained:\n\n{company_summary}"
    )

    model = "gemini-2.0-flash"

    response = client.models.generate_content(
        model=model,
        contents=prompt
    )

    return response.text

def parse_ai_usecases(text):
    """
    Parses the AI/ML use cases generated by the generate_ai_usecases() function
    and converts them into a structured JSON format.
    """
    use_cases = []
    
    # Splitting the text into individual use cases based on bullet points
    pattern = re.findall(r"\*\s+\*\*(\d+)\.\s+(.+?):\*\*\n\s+\*\s+\*\*Explanation:\*\*\s+(.+?)\n\s+\*\s+\*\*Practical Application:\*\*\s+(.+?)(?=\n\n\*|$)", text, re.DOTALL)
    
    for _, title, explanation, applications in pattern:
        # Splitting practical applications into a list
        practical_application = [app.strip() for app in applications.split("\n") if app.strip()]
        
        use_cases.append({
            "title": title.strip(),
            "explanation": explanation.strip(),
            "practical_application": practical_application
        })
    
    return {"use_cases": use_cases} 

def generate_structured_usecases(company_name, reseach_result):
    use_cases = generate_ai_usecases(company_name, reseach_result)
    return parse_ai_usecases(use_cases)

# Example usage
text = "Here are the top 5 most impactful AI and Machine Learning use cases for Ola Consumer, tailored to their current focus on the Indian market:\n\n*   **1. Dynamic Pricing Optimization & Demand Forecasting:**\n    *   **Explanation:** Predicts real-time demand fluctuations based on factors like location, time of day, weather, events, and historical data.\n    *   **Practical Application:** Enables optimized surge pricing that balances profitability with rider affordability, minimizing user frustration and maximizing driver earnings during peak demand periods (e.g., rush hour, festivals, concerts). This helps to ensure ride availability and efficient resource allocation.\n\n*   **2. Enhanced Route Optimization & ETA Prediction:**\n    *   **Explanation:** Leverages AI to analyze traffic patterns, road conditions, and driver availability to determine the most efficient routes in real-time.\n    *   **Practical Application:** Provides riders with more accurate Estimated Time of Arrival (ETA) predictions, improves driver efficiency by minimizing travel time and fuel consumption, and reduces overall congestion, particularly in heavily populated Indian cities. Could also suggest optimal pick-up/drop-off locations to avoid bottlenecks.\n\n*   **3. Fraud Detection & Driver Monitoring:**\n    *   **Explanation:** Employs Machine Learning algorithms to identify and prevent fraudulent activities, such as fake bookings, inflated fares, and driver collusion.\n    *   **Practical Application:** Protects both riders and drivers from financial losses and ensures a fair and secure platform. This includes using AI to analyze driving behavior (speed, braking, harsh turns) to detect potentially unsafe driving practices, thereby improving rider safety and reducing accident risk.\n\n*   **4. Personalized Recommendations & Customer Support:**\n    *   **Explanation:** Utilizes AI to personalize the rider experience, offering relevant promotions, preferred ride options (e.g., auto, bike, car), and tailored recommendations based on user behavior and preferences.\n    *   **Practical Application:** Enhances customer loyalty and satisfaction by providing a seamless and personalized experience. AI-powered chatbots can also handle routine customer inquiries and resolve issues quickly, freeing up human agents for more complex problems, improving the overall customer support experience.\n\n*   **5. Optimized Driver Allocation & Matching:**\n    *   **Explanation:** Employs Machine Learning to efficiently match riders with available drivers, considering factors like driver location, vehicle type, driver rating, and rider destination.\n    *   **Practical Application:** Reduces rider wait times, increases driver utilization, and improves overall operational efficiency. This can be further enhanced by predicting driver availability based on historical patterns and incentives for drivers to operate in areas with high demand, optimizing the supply-demand balance across the city. This also considers the various service offerings like financial services and cloud kitchen to connect drivers to the closest opportunity (eg: a driver driving someone close to a cloud kitchen can be notified of potential deliveries).\n"

# parsed_json = parse_ai_usecases(text)
# print(parsed_json)

# if __name__ == "__main__":
#     company_summary = input("Enter the company summary: ")
#     use_cases = generate_ai_usecases(company_summary)
#     print("\nAI/ML Use Cases:\n", use_cases)
